import re
import sqlite3
from datetime import datetime


class BancoDeDados:
    def __init__(self, nome_banco='restaurante4'):
        self.conn = sqlite3.connect(nome_banco)
        self.cursor = self.conn.cursor()

    def criar_banco_de_dados(self):
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS restaurantes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            comissao INTEGER NOT NULL,
            email TEXT NOT NULL UNIQUE,
            senha TEXT NOT NULL,
            data DATE
        )
        ''')

        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS produtos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            restaurante_id INTEGER,
            nome TEXT NOT NULL,
            preco REAL NOT NULL,
            FOREIGN KEY (restaurante_id) REFERENCES restaurantes(id)
        )
        ''')

        self.conn.commit()

    def fechar_conexao(self):
        self.conn.close()


class Restaurante:
    def __init__(self, banco):
        self.banco = banco
        self.logged_in = False
        self.current_restaurant_id = None
        self.quantidade_produtos = 0  # Inicializa a quantidade de produtos

    def login_cadastro(self):
        while not self.logged_in:
            resp = input('0 - Cadastro\n1 - Login\nDigite um valor: ')
            while resp != '0' and resp != '1':
                resp = input('Digite uma opção válida!\n0 - Cadastro\n1 - Login\n')

            if resp == '0':
                self.cadastrar_restaurante()
            else:
                self.fazer_login()

        return self.current_restaurant_id, self.quantidade_produtos

    def cadastrar_restaurante(self):
        nome = input('Nome do restaurante (deve ter mais de 10 caracteres): ')
        while len(nome) <= 10:
            nome = input('Digite o nome do restaurante corretamente com mais de 10 caracteres: ')

        comissao = input('Comissão do restaurante (valor entre 0 e 70): ')
        while not comissao.isdigit() or int(comissao) <= 0 or int(comissao) > 70:
            print('Deve ser apenas números e o valor maior que 0.')
            comissao = input('Comissão do restaurante (valor entre 0 e 70): ')

        email = input('Email do restaurante: ')
        while not re.search(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', email):
            email = input('Email do restaurante: ')
        senha = input('Digite a sua senha: ')
        senha2 = input('Digite a confirmação da sua senha: ')
        email = email.lower()

        while len(senha) < 5 or not re.search(r'[a-z]', senha) or not re.search(r'[A-Z]', senha) or not re.search(
                r'[0-9]', senha) or senha != senha2:
            print("Senha inválida. Ela deve ter pelo menos 5 caracteres, contendo letras maiúsculas, minúsculas e números e a senha deve ser igual nas duas etapas.")
            senha = input('Digite a sua senha: ')
            print('Confirme sua senha corretamente!')
            senha2 = input('Digite a sua senha: ')

        try:
            self.banco.cursor.execute('''
                INSERT INTO restaurantes (nome, comissao, email, senha)
                VALUES (?, ?, ?, ?)
            ''', (nome, int(comissao), email, senha))
            self.banco.conn.commit()
            print('Cadastro realizado com sucesso!')
        except sqlite3.IntegrityError:
            print('Erro: Email já cadastrado.')

    def fazer_login(self):
        login_email = input('Digite seu email: ')
        login_senha = input('Digite sua senha: ')

        self.banco.cursor.execute(
            '''SELECT id, nome, comissao, email, senha FROM restaurantes WHERE email = ? AND senha = ?''',
            (login_email, login_senha))

        usuario = self.banco.cursor.fetchone()

        if usuario:
            print(f'Login realizado com sucesso! Bem-vindo, {usuario[1]}.')
            self.logged_in = True
            self.current_restaurant_id = usuario[0]

            self.banco.cursor.execute('SELECT data FROM restaurantes WHERE id = ?', (self.current_restaurant_id,))
            data_salvo = self.banco.cursor.fetchone()

            if data_salvo and data_salvo[0]:
                data_salvo_datetime = datetime.fromisoformat(data_salvo[0])
                data_formatada = data_salvo_datetime.strftime('%d/%m/%Y %H:%M')
                print(f'Data do último login: {data_formatada}')
            else:
                print('Primeiro login ou data não disponível.')

            self.banco.cursor.execute('SELECT id, nome, preco FROM produtos WHERE restaurante_id = ?',
                                      (self.current_restaurant_id,))
            produtos = self.banco.cursor.fetchall()

            if produtos:
                print("\nProdutos cadastrados:")
                print(f"{'ID':<5} {'Nome':<30} {'Preço (R$)':<10}")
                print("-" * 50)
                for produto in produtos:
                    id_produto, nome, preco = produto
                    print(f"{id_produto:<5} {nome:<30} {preco:<10.2f}")
                print('-' * 50)
                self.quantidade_produtos = len(produtos)
                print(f'Quantidade total de produtos: {self.quantidade_produtos}\n\n')
            else:
                print('\nNenhum produto cadastrado.')
                self.quantidade_produtos = 0

            data_salvo = datetime.now().isoformat()

            self.banco.cursor.execute('''
                    UPDATE restaurantes
                    SET data = ?
                    WHERE id = ?
                ''', (data_salvo, self.current_restaurant_id))

            self.banco.conn.commit()

        else:
            print('Email ou senha incorretos. Tente novamente.')


class Produto:
    def __init__(self, banco):
        self.banco = banco

    def cadastro_produtos(self, restaurante_id):
        while True:
            resposta = input('1 - Cadastro do produto\n2 - Apagar produto\n3 - Alterar comissão\n4 - Logout\n')
            while resposta not in ['1', '2', '3', '4']:
                print('Digite uma resposta válida!')
                resposta = input('1 - Cadastro do produto\n2 - Apagar produto\n3 - Alterar comissão\n4 - Logout\n')

            if resposta == '1':
                self.cadastrar_produto(restaurante_id)
            elif resposta == '2':
                self.apagar_produto(restaurante_id)
            elif resposta == '3':
                self.alterar_comissao(restaurante_id)
            else:
                break

    def cadastrar_produto(self, restaurante_id):
        nome = input('Digite o nome do produto:\n ')
        while len(nome) < 5 or not all(c.isalpha() or c.isspace() for c in nome):
            nome = input('Digite o nome do produto (mínimo 5 letras e apenas alfabético):\n ')

        while True:
            preco = input('Digite o preço do produto:\n ')
            try:
                preco = float(preco)
                if preco < 0:
                    print("O preço não pode ser negativo. Tente novamente.")
                else:
                    break
            except ValueError:
                print("Por favor, digite um número válido.")

        self.banco.cursor.execute('''
            INSERT INTO produtos (restaurante_id, nome, preco)
            VALUES (?, ?, ?)
        ''', (restaurante_id, nome, preco))

        self.banco.conn.commit()
        print(f"O produto '{nome}' foi cadastrado com o preço de R$ {preco:.2f}\n")

    def apagar_produto(self, restaurante_id):
        self.banco.cursor.execute('SELECT id, nome, preco FROM produtos WHERE restaurante_id = ?', (restaurante_id,))
        produtos = self.banco.cursor.fetchall()

        if produtos:
            print("\nProdutos cadastrados:")
            print(f"{'ID':<5} {'Nome':<30} {'Preço (R$)':<10}")
            print("-" * 50)
            for produto in produtos:
                id_produto, nome, preco = produto
                print(f"{id_produto:<5} {nome:<30} {preco:<10.2f}")
            print('-' * 50)
            quantidade_produtos = len(produtos)
            print(f'Quantidade total de produtos: {quantidade_produtos}\n\n')

        deletar_id = input('Qual o código do produto que você deseja deletar?: ')
        while not deletar_id.isdigit():
            print('Digite um número válido.')
            deletar_id = input('Qual o código do produto que você deseja deletar?: ')
        deletar_id = int(deletar_id)

        self.banco.cursor.execute('SELECT * FROM produtos WHERE id = ? AND restaurante_id = ?',
                                  (deletar_id, restaurante_id))
        produto = self.banco.cursor.fetchone()

        if produto:
            print(f"Produto encontrado: {produto[2]}")
            confirmacao = input(f'Tem certeza de que deseja deletar o produto ({produto[2]}) (s/n): ')
            if confirmacao.lower() == 's':
                self.banco.cursor.execute('DELETE FROM produtos WHERE id = ? AND restaurante_id = ?',
                                          (deletar_id, restaurante_id))
                self.banco.conn.commit()
                print(f'Produto {produto[2]} deletado com sucesso!')
            else:
                print('Ação de exclusão cancelada.')
        else:
            print('Produto não encontrado ou não pertence a este restaurante.')

    def alterar_comissao(self, restaurante_id):
        valor_comissao = input('Digite o valor da nova comissão: ')
        while not valor_comissao.isdigit() or int(valor_comissao) < 0 or int(valor_comissao) > 70:
            print('O valor deve ser um número e entre 0 e 70.')
            valor_comissao = input('Digite o novo valor da comissão: ')
        valor_comissao = int(valor_comissao)

        self.banco.cursor.execute('SELECT * FROM restaurantes WHERE id = ?', (restaurante_id,))
        mudar_comissao = self.banco.cursor.fetchone()
        print('Valor atual da comissão:', mudar_comissao[2], '%')

        if mudar_comissao:
            confirmacao = input(f'Tem certeza de que deseja mudar a comissão para {valor_comissao}%? (s/n): ')
            if confirmacao.lower() == 's':
                self.banco.cursor.execute('UPDATE restaurantes SET comissao = ? WHERE id = ?',
                                          (valor_comissao, restaurante_id))
                self.banco.conn.commit()
                print(f'\nA comissão foi alterada com sucesso para {valor_comissao}!\n')
        else:
            print('Restaurante não encontrado.')


def main():
    banco = BancoDeDados()
    banco.criar_banco_de_dados()

    while True:
        restaurante = Restaurante(banco)
        current_restaurant_id, quantidade_produtos = restaurante.login_cadastro()
        produto = Produto(banco)
        produto.cadastro_produtos(current_restaurant_id)


if __name__ == "__main__":
    main()
